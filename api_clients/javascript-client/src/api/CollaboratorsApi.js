/*
 * DagsHub API
 * This API is used to interact with DagsHub. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CollaboratorsCollaboratorBody} from '../model/CollaboratorsCollaboratorBody';

/**
* Collaborators service.
* @module api/CollaboratorsApi
* @version 1.0.0
*/
export class CollaboratorsApi {

    /**
    * Constructs a new CollaboratorsApi. 
    * @alias module:api/CollaboratorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addCollaborator operation.
     * @callback moduleapi/CollaboratorsApi~addCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user as a collaborator
     * @param {String} username A DagsHub username
     * @param {String} repo name of the repository
     * @param {String} collaborator collaborator username
     * @param {Object} opts Optional parameters
     * @param {module:model/CollaboratorsCollaboratorBody} opts.body 
     * @param {module:api/CollaboratorsApi~addCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCollaborator(username, repo, collaborator, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling addCollaborator");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling addCollaborator");
      }
      // verify the required parameter 'collaborator' is set
      if (collaborator === undefined || collaborator === null) {
        throw new Error("Missing the required parameter 'collaborator' when calling addCollaborator");
      }

      let pathParams = {
        'username': username,'repo': repo,'collaborator': collaborator
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{username}/{repo}/collaborators/{collaborator}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCollaborators operation.
     * @callback moduleapi/CollaboratorsApi~getCollaboratorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collaborators
     * @param {String} username A DagsHub username
     * @param {String} repo name of the repository
     * @param {module:api/CollaboratorsApi~getCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCollaborators(username, repo, callback) {
      
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getCollaborators");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getCollaborators");
      }

      let pathParams = {
        'username': username,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{username}/{repo}/collaborators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeCollaborator operation.
     * @callback moduleapi/CollaboratorsApi~removeCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collaborator
     * @param {module:api/CollaboratorsApi~removeCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeCollaborator(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{username}/{repo}/collaborators/{collaborator}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}