/*
 * DagsHub API
 * This API is used to interact with DagsHub. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {HooksIdBody} from '../model/HooksIdBody';
import {RepoHooksBody} from '../model/RepoHooksBody';

/**
* Webhooks service.
* @module api/WebhooksApi
* @version 1.0.0
*/
export class WebhooksApi {

    /**
    * Constructs a new WebhooksApi. 
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createHook operation.
     * @callback moduleapi/WebhooksApi~createHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a hook
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {Object} opts Optional parameters
     * @param {module:model/RepoHooksBody} opts.body 
     * @param {module:api/WebhooksApi~createHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createHook(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createHook");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling createHook");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteHook operation.
     * @callback moduleapi/WebhooksApi~deleteHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a hook
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {Number} id 
     * @param {module:api/WebhooksApi~deleteHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHook(owner, repo, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteHook");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling deleteHook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteHook");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the editHook operation.
     * @callback moduleapi/WebhooksApi~editHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a hook
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/HooksIdBody} opts.body 
     * @param {module:api/WebhooksApi~editHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editHook(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling editHook");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling editHook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editHook");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listHooks operation.
     * @callback moduleapi/WebhooksApi~listHooksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List hooks
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {module:api/WebhooksApi~listHooksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listHooks(owner, repo, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listHooks");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling listHooks");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}