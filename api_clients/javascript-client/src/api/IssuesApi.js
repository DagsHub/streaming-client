/*
 * DagsHub API
 * This API is used to interact with DagsHub. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Issue} from '../model/Issue';
import {Issues} from '../model/Issues';
import {PatchIssue} from '../model/PatchIssue';
import {PostIssue} from '../model/PostIssue';

/**
* Issues service.
* @module api/IssuesApi
* @version 1.0.0
*/
export class IssuesApi {

    /**
    * Constructs a new IssuesApi. 
    * @alias module:api/IssuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createIssue operation.
     * @callback moduleapi/IssuesApi~createIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an issue
     * Any user with read access to a repository can create an issue.
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {Object} opts Optional parameters
     * @param {module:model/PostIssue} opts.body 
     * @param {module:api/IssuesApi~createIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createIssue(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling createIssue");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Issue;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the editIssue operation.
     * @callback moduleapi/IssuesApi~editIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an issue
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchIssue} opts.body 
     * @param {module:api/IssuesApi~editIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    editIssue(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling editIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling editIssue");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Issue;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIssue operation.
     * @callback moduleapi/IssuesApi~getIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single issue
     * This endpoint may also return pull requests in the response. If an issue is a pull request, the object will include a pull_request key.
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {Number} index the index of an issue or a pull request
     * @param {module:api/IssuesApi~getIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getIssue(owner, repo, index, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getIssue");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling getIssue");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Issue;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listRepoIssues operation.
     * @callback moduleapi/IssuesApi~listRepoIssuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issues{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List issues for a repository
     * This endpoint may also return pull requests in the response. If an issue is a pull request, the object will include a pull_request key.
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {module:api/IssuesApi~listRepoIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listRepoIssues(owner, repo, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listRepoIssues");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling listRepoIssues");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Issues;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}