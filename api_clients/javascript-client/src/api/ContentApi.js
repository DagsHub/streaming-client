/*
 * DagsHub API
 * This API is used to interact with DagsHub. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Files} from '../model/Files';

/**
* Content service.
* @module api/ContentApi
* @version 1.0.0
*/
export class ContentApi {

    /**
    * Constructs a new ContentApi. 
    * @alias module:api/ContentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getArchive operation.
     * @callback moduleapi/ContentApi~getArchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download archive
     * This method returns archive by given format.
     * @param {String} username A DagsHub username
     * @param {String} repo name of the repository
     * @param {String} ref The name of the commit/branch/tag
     * @param {module:model/String} format The format of archive, either .zip or .tar.gz
     * @param {module:api/ContentApi~getArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getArchive(username, repo, ref, format, callback) {
      
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getArchive");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getArchive");
      }
      // verify the required parameter 'ref' is set
      if (ref === undefined || ref === null) {
        throw new Error("Missing the required parameter 'ref' when calling getArchive");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getArchive");
      }

      let pathParams = {
        'username': username,'repo': repo,'ref': ref,'format': format
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{username}/{repo}/archive/{ref}/{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getContent operation.
     * @callback moduleapi/ContentApi~getContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Files{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data from a folder in repository
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {String} branch branch of the repository
     * @param {String} treePath path of a folter in the repository
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeSize  (default to <.>)
     * @param {module:api/ContentApi~getContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getContent(owner, repo, branch, treePath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getContent");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getContent");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling getContent");
      }
      // verify the required parameter 'treePath' is set
      if (treePath === undefined || treePath === null) {
        throw new Error("Missing the required parameter 'treePath' when calling getContent");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'branch': branch,'treePath': treePath
      };
      let queryParams = {
        'include_size': opts['includeSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Files;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/content/{branch}/{treePath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRaw operation.
     * @callback moduleapi/ContentApi~getRawCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download raw content
     * This method returns the raw content of a file.
     * @param {String} username A DagsHub username
     * @param {String} repo name of the repository
     * @param {String} ref The name of the commit/branch/tag
     * @param {String} path The content path
     * @param {module:api/ContentApi~getRawCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRaw(username, repo, ref, path, callback) {
      
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getRaw");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getRaw");
      }
      // verify the required parameter 'ref' is set
      if (ref === undefined || ref === null) {
        throw new Error("Missing the required parameter 'ref' when calling getRaw");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getRaw");
      }

      let pathParams = {
        'username': username,'repo': repo,'ref': ref,'path': path
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{username}/{repo}/raw/{ref}/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the uploadContent operation.
     * @callback moduleapi/ContentApi~uploadContentCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload data to a repository
     * last_commit - If the tip of the branch differs on the server at the moment of processing the request, the request is denied.
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {String} branch branch of the repository
     * @param {String} treePath path of a folter in the repository
     * @param {Object} opts Optional parameters
     * @param {String} opts.commitSummary 
     * @param {String} opts.commitMessage 
     * @param {module:model/String} opts.commitChoice 
     * @param {String} opts.lastCommit 
     * @param {String} opts.newBranchName 
     * @param {module:model/String} opts.versioning 
     * @param {Array.<Object>} opts.files 
     * @param {module:api/ContentApi~uploadContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    uploadContent(owner, repo, branch, treePath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling uploadContent");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling uploadContent");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling uploadContent");
      }
      // verify the required parameter 'treePath' is set
      if (treePath === undefined || treePath === null) {
        throw new Error("Missing the required parameter 'treePath' when calling uploadContent");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'branch': branch,'treePath': treePath
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'commit_summary': opts['commitSummary'],'commit_message': opts['commitMessage'],'commit_choice': opts['commitChoice'],'last_commit': opts['lastCommit'],'new_branch_name': opts['newBranchName'],'versioning': opts['versioning'],'files': this.apiClient.buildCollectionParam(opts['files'], 'multi')
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/content/{branch}/{treePath}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}