# coding: utf-8

"""
    DagsHub API

    This API is used to interact with DagsHub.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PutFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commit_summary': 'str',
        'commit_message': 'str',
        'commit_choice': 'str',
        'last_commit': 'str',
        'new_branch_name': 'str',
        'versioning': 'str',
        'files': 'list[object]'
    }

    attribute_map = {
        'commit_summary': 'commit_summary',
        'commit_message': 'commit_message',
        'commit_choice': 'commit_choice',
        'last_commit': 'last_commit',
        'new_branch_name': 'new_branch_name',
        'versioning': 'versioning',
        'files': 'files'
    }

    def __init__(self, commit_summary=None, commit_message=None, commit_choice=None, last_commit=None, new_branch_name=None, versioning=None, files=None):  # noqa: E501
        """PutFile - a model defined in Swagger"""  # noqa: E501
        self._commit_summary = None
        self._commit_message = None
        self._commit_choice = None
        self._last_commit = None
        self._new_branch_name = None
        self._versioning = None
        self._files = None
        self.discriminator = None
        if commit_summary is not None:
            self.commit_summary = commit_summary
        self.commit_message = commit_message
        if commit_choice is not None:
            self.commit_choice = commit_choice
        if last_commit is not None:
            self.last_commit = last_commit
        if new_branch_name is not None:
            self.new_branch_name = new_branch_name
        if versioning is not None:
            self.versioning = versioning
        if files is not None:
            self.files = files

    @property
    def commit_summary(self):
        """Gets the commit_summary of this PutFile.  # noqa: E501


        :return: The commit_summary of this PutFile.  # noqa: E501
        :rtype: str
        """
        return self._commit_summary

    @commit_summary.setter
    def commit_summary(self, commit_summary):
        """Sets the commit_summary of this PutFile.


        :param commit_summary: The commit_summary of this PutFile.  # noqa: E501
        :type: str
        """

        self._commit_summary = commit_summary

    @property
    def commit_message(self):
        """Gets the commit_message of this PutFile.  # noqa: E501


        :return: The commit_message of this PutFile.  # noqa: E501
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this PutFile.


        :param commit_message: The commit_message of this PutFile.  # noqa: E501
        :type: str
        """
        if commit_message is None:
            raise ValueError("Invalid value for `commit_message`, must not be `None`")  # noqa: E501

        self._commit_message = commit_message

    @property
    def commit_choice(self):
        """Gets the commit_choice of this PutFile.  # noqa: E501


        :return: The commit_choice of this PutFile.  # noqa: E501
        :rtype: str
        """
        return self._commit_choice

    @commit_choice.setter
    def commit_choice(self, commit_choice):
        """Sets the commit_choice of this PutFile.


        :param commit_choice: The commit_choice of this PutFile.  # noqa: E501
        :type: str
        """
        allowed_values = ["direct", "commit-to-new-branch"]  # noqa: E501
        if commit_choice not in allowed_values:
            raise ValueError(
                "Invalid value for `commit_choice` ({0}), must be one of {1}"  # noqa: E501
                .format(commit_choice, allowed_values)
            )

        self._commit_choice = commit_choice

    @property
    def last_commit(self):
        """Gets the last_commit of this PutFile.  # noqa: E501

        if omitted only new files will be accepted  # noqa: E501

        :return: The last_commit of this PutFile.  # noqa: E501
        :rtype: str
        """
        return self._last_commit

    @last_commit.setter
    def last_commit(self, last_commit):
        """Sets the last_commit of this PutFile.

        if omitted only new files will be accepted  # noqa: E501

        :param last_commit: The last_commit of this PutFile.  # noqa: E501
        :type: str
        """

        self._last_commit = last_commit

    @property
    def new_branch_name(self):
        """Gets the new_branch_name of this PutFile.  # noqa: E501


        :return: The new_branch_name of this PutFile.  # noqa: E501
        :rtype: str
        """
        return self._new_branch_name

    @new_branch_name.setter
    def new_branch_name(self, new_branch_name):
        """Sets the new_branch_name of this PutFile.


        :param new_branch_name: The new_branch_name of this PutFile.  # noqa: E501
        :type: str
        """

        self._new_branch_name = new_branch_name

    @property
    def versioning(self):
        """Gets the versioning of this PutFile.  # noqa: E501


        :return: The versioning of this PutFile.  # noqa: E501
        :rtype: str
        """
        return self._versioning

    @versioning.setter
    def versioning(self, versioning):
        """Sets the versioning of this PutFile.


        :param versioning: The versioning of this PutFile.  # noqa: E501
        :type: str
        """
        allowed_values = ["dvc", "git"]  # noqa: E501
        if versioning not in allowed_values:
            raise ValueError(
                "Invalid value for `versioning` ({0}), must be one of {1}"  # noqa: E501
                .format(versioning, allowed_values)
            )

        self._versioning = versioning

    @property
    def files(self):
        """Gets the files of this PutFile.  # noqa: E501


        :return: The files of this PutFile.  # noqa: E501
        :rtype: list[object]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this PutFile.


        :param files: The files of this PutFile.  # noqa: E501
        :type: list[object]
        """

        self._files = files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
