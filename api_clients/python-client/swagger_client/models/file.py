# coding: utf-8

"""
    DagsHub API

    This API is used to interact with DagsHub.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class File(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'type': 'str',
        'size': 'int',
        'hash': 'str',
        'versioning': 'str',
        'download_url': 'str'
    }

    attribute_map = {
        'path': 'path',
        'type': 'type',
        'size': 'size',
        'hash': 'hash',
        'versioning': 'versioning',
        'download_url': 'download_url'
    }

    def __init__(self, path=None, type=None, size=None, hash=None, versioning=None, download_url=None):  # noqa: E501
        """File - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._type = None
        self._size = None
        self._hash = None
        self._versioning = None
        self._download_url = None
        self.discriminator = None
        if path is not None:
            self.path = path
        if type is not None:
            self.type = type
        if size is not None:
            self.size = size
        if hash is not None:
            self.hash = hash
        if versioning is not None:
            self.versioning = versioning
        if download_url is not None:
            self.download_url = download_url

    @property
    def path(self):
        """Gets the path of this File.  # noqa: E501


        :return: The path of this File.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this File.


        :param path: The path of this File.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def type(self):
        """Gets the type of this File.  # noqa: E501


        :return: The type of this File.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this File.


        :param type: The type of this File.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def size(self):
        """Gets the size of this File.  # noqa: E501


        :return: The size of this File.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this File.


        :param size: The size of this File.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def hash(self):
        """Gets the hash of this File.  # noqa: E501


        :return: The hash of this File.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this File.


        :param hash: The hash of this File.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def versioning(self):
        """Gets the versioning of this File.  # noqa: E501


        :return: The versioning of this File.  # noqa: E501
        :rtype: str
        """
        return self._versioning

    @versioning.setter
    def versioning(self, versioning):
        """Sets the versioning of this File.


        :param versioning: The versioning of this File.  # noqa: E501
        :type: str
        """

        self._versioning = versioning

    @property
    def download_url(self):
        """Gets the download_url of this File.  # noqa: E501


        :return: The download_url of this File.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this File.


        :param download_url: The download_url of this File.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(File, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, File):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
