# coding: utf-8

"""
    DagsHub API

    This API is used to interact with DagsHub.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostIssue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'Title',
        'body': 'Body',
        'assignee': 'Assignee',
        'milestone': 'Milestone',
        'labels': 'Labels',
        'closed': 'Closed'
    }

    attribute_map = {
        'title': 'title',
        'body': 'body',
        'assignee': 'assignee',
        'milestone': 'milestone',
        'labels': 'labels',
        'closed': 'closed'
    }

    def __init__(self, title=None, body=None, assignee=None, milestone=None, labels=None, closed=None):  # noqa: E501
        """PostIssue - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._body = None
        self._assignee = None
        self._milestone = None
        self._labels = None
        self._closed = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if body is not None:
            self.body = body
        if assignee is not None:
            self.assignee = assignee
        if milestone is not None:
            self.milestone = milestone
        if labels is not None:
            self.labels = labels
        if closed is not None:
            self.closed = closed

    @property
    def title(self):
        """Gets the title of this PostIssue.  # noqa: E501


        :return: The title of this PostIssue.  # noqa: E501
        :rtype: Title
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PostIssue.


        :param title: The title of this PostIssue.  # noqa: E501
        :type: Title
        """

        self._title = title

    @property
    def body(self):
        """Gets the body of this PostIssue.  # noqa: E501


        :return: The body of this PostIssue.  # noqa: E501
        :rtype: Body
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PostIssue.


        :param body: The body of this PostIssue.  # noqa: E501
        :type: Body
        """

        self._body = body

    @property
    def assignee(self):
        """Gets the assignee of this PostIssue.  # noqa: E501


        :return: The assignee of this PostIssue.  # noqa: E501
        :rtype: Assignee
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this PostIssue.


        :param assignee: The assignee of this PostIssue.  # noqa: E501
        :type: Assignee
        """

        self._assignee = assignee

    @property
    def milestone(self):
        """Gets the milestone of this PostIssue.  # noqa: E501


        :return: The milestone of this PostIssue.  # noqa: E501
        :rtype: Milestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this PostIssue.


        :param milestone: The milestone of this PostIssue.  # noqa: E501
        :type: Milestone
        """

        self._milestone = milestone

    @property
    def labels(self):
        """Gets the labels of this PostIssue.  # noqa: E501


        :return: The labels of this PostIssue.  # noqa: E501
        :rtype: Labels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PostIssue.


        :param labels: The labels of this PostIssue.  # noqa: E501
        :type: Labels
        """

        self._labels = labels

    @property
    def closed(self):
        """Gets the closed of this PostIssue.  # noqa: E501


        :return: The closed of this PostIssue.  # noqa: E501
        :rtype: Closed
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this PostIssue.


        :param closed: The closed of this PostIssue.  # noqa: E501
        :type: Closed
        """

        self._closed = closed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostIssue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostIssue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
