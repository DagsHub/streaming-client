/*
 * DagsHub API
 * This API is used to interact with DagsHub. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CreateRepo;
import io.swagger.client.model.MigrateRepo;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for RepositoryApi
 */
@Ignore
public class RepositoryApiTest {

    private final RepositoryApi api = new RepositoryApi();

    /**
     * Create in organization
     *
     * Create a new repository in this organization. The authenticated user must be an **owner** of the specified organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrgRepoTest() throws Exception {
        String orgname = null;
        CreateRepo body = null;
        api.createOrgRepo(orgname, body);

        // TODO: test validations
    }
    /**
     * Create
     *
     * Create a new repository for the authenticated user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createRepoTest() throws Exception {
        CreateRepo body = null;
        api.createRepo(body);

        // TODO: test validations
    }
    /**
     * List your repositories
     *
     * List repositories that are accessible to the authenticated user.  This includes repositories owned by the authenticated user, repositories where the authenticated user is a collaborator, and repositories that the authenticated user has access to through an organization membership. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listMyReposTest() throws Exception {
        Object response = api.listMyRepos();

        // TODO: test validations
    }
    /**
     * List organization repositories
     *
     * List repositories that are accessible to the authenticated user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listOrgReposTest() throws Exception {
        String orgname = null;
        api.listOrgRepos(orgname);

        // TODO: test validations
    }
    /**
     * List user repositories
     *
     * List public repositories for the specified user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listUserReposTest() throws Exception {
        String username = null;
        api.listUserRepos(username);

        // TODO: test validations
    }
    /**
     * Migrate repository
     *
     * Migrate a repository from other Git hosting sources for the authenticated user.  To migrate a repository for a organization, the authenticated user must be a **owner** of the specified organization. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void migrateRepoTest() throws Exception {
        MigrateRepo body = null;
        api.migrateRepo(body);

        // TODO: test validations
    }
    /**
     * Search repositories
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchTest() throws Exception {
        String q = null;
        Integer uid = null;
        Integer limit = null;
        Integer page = null;
        Object response = api.search(q, uid, limit, page);

        // TODO: test validations
    }
}
