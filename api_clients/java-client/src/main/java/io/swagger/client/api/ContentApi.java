/*
 * DagsHub API
 * This API is used to interact with DagsHub. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Files;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentApi {
    private ApiClient apiClient;

    public ContentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getArchive
     * @param username A DagsHub username (required)
     * @param repo name of the repository (required)
     * @param ref The name of the commit/branch/tag (required)
     * @param format The format of archive, either .zip or .tar.gz (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getArchiveCall(String username, String repo, String ref, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/repos/{username}/{repo}/archive/{ref}/{format}"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "ref" + "\\}", apiClient.escapeString(ref.toString()))
            .replaceAll("\\{" + "format" + "\\}", apiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "tokenAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getArchiveValidateBeforeCall(String username, String repo, String ref, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getArchive(Async)");
        }
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling getArchive(Async)");
        }
        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling getArchive(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getArchive(Async)");
        }
        
        com.squareup.okhttp.Call call = getArchiveCall(username, repo, ref, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Download archive
     * This method returns archive by given format.
     * @param username A DagsHub username (required)
     * @param repo name of the repository (required)
     * @param ref The name of the commit/branch/tag (required)
     * @param format The format of archive, either .zip or .tar.gz (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getArchive(String username, String repo, String ref, String format) throws ApiException {
        getArchiveWithHttpInfo(username, repo, ref, format);
    }

    /**
     * Download archive
     * This method returns archive by given format.
     * @param username A DagsHub username (required)
     * @param repo name of the repository (required)
     * @param ref The name of the commit/branch/tag (required)
     * @param format The format of archive, either .zip or .tar.gz (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getArchiveWithHttpInfo(String username, String repo, String ref, String format) throws ApiException {
        com.squareup.okhttp.Call call = getArchiveValidateBeforeCall(username, repo, ref, format, null, null);
        return apiClient.execute(call);
    }

    /**
     * Download archive (asynchronously)
     * This method returns archive by given format.
     * @param username A DagsHub username (required)
     * @param repo name of the repository (required)
     * @param ref The name of the commit/branch/tag (required)
     * @param format The format of archive, either .zip or .tar.gz (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getArchiveAsync(String username, String repo, String ref, String format, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getArchiveValidateBeforeCall(username, repo, ref, format, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getContent
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param branch branch of the repository (required)
     * @param treePath path of a folter in the repository (required)
     * @param includeSize  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentCall(String owner, String repo, String branch, String treePath, Boolean includeSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/content/{branch}/{treePath}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "treePath" + "\\}", apiClient.escapeString(treePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_size", includeSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "tokenAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentValidateBeforeCall(String owner, String repo, String branch, String treePath, Boolean includeSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getContent(Async)");
        }
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling getContent(Async)");
        }
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getContent(Async)");
        }
        // verify the required parameter 'treePath' is set
        if (treePath == null) {
            throw new ApiException("Missing the required parameter 'treePath' when calling getContent(Async)");
        }
        
        com.squareup.okhttp.Call call = getContentCall(owner, repo, branch, treePath, includeSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get data from a folder in repository
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param branch branch of the repository (required)
     * @param treePath path of a folter in the repository (required)
     * @param includeSize  (optional, default to false)
     * @return Files
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Files getContent(String owner, String repo, String branch, String treePath, Boolean includeSize) throws ApiException {
        ApiResponse<Files> resp = getContentWithHttpInfo(owner, repo, branch, treePath, includeSize);
        return resp.getData();
    }

    /**
     * Get data from a folder in repository
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param branch branch of the repository (required)
     * @param treePath path of a folter in the repository (required)
     * @param includeSize  (optional, default to false)
     * @return ApiResponse&lt;Files&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Files> getContentWithHttpInfo(String owner, String repo, String branch, String treePath, Boolean includeSize) throws ApiException {
        com.squareup.okhttp.Call call = getContentValidateBeforeCall(owner, repo, branch, treePath, includeSize, null, null);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get data from a folder in repository (asynchronously)
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param branch branch of the repository (required)
     * @param treePath path of a folter in the repository (required)
     * @param includeSize  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentAsync(String owner, String repo, String branch, String treePath, Boolean includeSize, final ApiCallback<Files> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentValidateBeforeCall(owner, repo, branch, treePath, includeSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRaw
     * @param username A DagsHub username (required)
     * @param repo name of the repository (required)
     * @param ref The name of the commit/branch/tag (required)
     * @param path The content path (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRawCall(String username, String repo, String ref, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/repos/{username}/{repo}/raw/{ref}/{path}"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "ref" + "\\}", apiClient.escapeString(ref.toString()))
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "tokenAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRawValidateBeforeCall(String username, String repo, String ref, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getRaw(Async)");
        }
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling getRaw(Async)");
        }
        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling getRaw(Async)");
        }
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getRaw(Async)");
        }
        
        com.squareup.okhttp.Call call = getRawCall(username, repo, ref, path, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Download raw content
     * This method returns the raw content of a file.
     * @param username A DagsHub username (required)
     * @param repo name of the repository (required)
     * @param ref The name of the commit/branch/tag (required)
     * @param path The content path (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getRaw(String username, String repo, String ref, String path) throws ApiException {
        getRawWithHttpInfo(username, repo, ref, path);
    }

    /**
     * Download raw content
     * This method returns the raw content of a file.
     * @param username A DagsHub username (required)
     * @param repo name of the repository (required)
     * @param ref The name of the commit/branch/tag (required)
     * @param path The content path (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getRawWithHttpInfo(String username, String repo, String ref, String path) throws ApiException {
        com.squareup.okhttp.Call call = getRawValidateBeforeCall(username, repo, ref, path, null, null);
        return apiClient.execute(call);
    }

    /**
     * Download raw content (asynchronously)
     * This method returns the raw content of a file.
     * @param username A DagsHub username (required)
     * @param repo name of the repository (required)
     * @param ref The name of the commit/branch/tag (required)
     * @param path The content path (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRawAsync(String username, String repo, String ref, String path, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRawValidateBeforeCall(username, repo, ref, path, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadContent
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param branch branch of the repository (required)
     * @param treePath path of a folter in the repository (required)
     * @param commitSummary  (optional)
     * @param commitMessage  (optional)
     * @param commitChoice  (optional)
     * @param lastCommit  (optional)
     * @param newBranchName  (optional)
     * @param versioning  (optional)
     * @param files  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadContentCall(String owner, String repo, String branch, String treePath, String commitSummary, String commitMessage, String commitChoice, String lastCommit, String newBranchName, String versioning, List<Object> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/content/{branch}/{treePath}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "treePath" + "\\}", apiClient.escapeString(treePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (commitSummary != null)
        localVarFormParams.put("commit_summary", commitSummary);
        if (commitMessage != null)
        localVarFormParams.put("commit_message", commitMessage);
        if (commitChoice != null)
        localVarFormParams.put("commit_choice", commitChoice);
        if (lastCommit != null)
        localVarFormParams.put("last_commit", lastCommit);
        if (newBranchName != null)
        localVarFormParams.put("new_branch_name", newBranchName);
        if (versioning != null)
        localVarFormParams.put("versioning", versioning);
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "tokenAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadContentValidateBeforeCall(String owner, String repo, String branch, String treePath, String commitSummary, String commitMessage, String commitChoice, String lastCommit, String newBranchName, String versioning, List<Object> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling uploadContent(Async)");
        }
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling uploadContent(Async)");
        }
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling uploadContent(Async)");
        }
        // verify the required parameter 'treePath' is set
        if (treePath == null) {
            throw new ApiException("Missing the required parameter 'treePath' when calling uploadContent(Async)");
        }
        
        com.squareup.okhttp.Call call = uploadContentCall(owner, repo, branch, treePath, commitSummary, commitMessage, commitChoice, lastCommit, newBranchName, versioning, files, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload data to a repository
     * last_commit - If the tip of the branch differs on the server at the moment of processing the request, the request is denied.
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param branch branch of the repository (required)
     * @param treePath path of a folter in the repository (required)
     * @param commitSummary  (optional)
     * @param commitMessage  (optional)
     * @param commitChoice  (optional)
     * @param lastCommit  (optional)
     * @param newBranchName  (optional)
     * @param versioning  (optional)
     * @param files  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object uploadContent(String owner, String repo, String branch, String treePath, String commitSummary, String commitMessage, String commitChoice, String lastCommit, String newBranchName, String versioning, List<Object> files) throws ApiException {
        ApiResponse<Object> resp = uploadContentWithHttpInfo(owner, repo, branch, treePath, commitSummary, commitMessage, commitChoice, lastCommit, newBranchName, versioning, files);
        return resp.getData();
    }

    /**
     * Upload data to a repository
     * last_commit - If the tip of the branch differs on the server at the moment of processing the request, the request is denied.
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param branch branch of the repository (required)
     * @param treePath path of a folter in the repository (required)
     * @param commitSummary  (optional)
     * @param commitMessage  (optional)
     * @param commitChoice  (optional)
     * @param lastCommit  (optional)
     * @param newBranchName  (optional)
     * @param versioning  (optional)
     * @param files  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> uploadContentWithHttpInfo(String owner, String repo, String branch, String treePath, String commitSummary, String commitMessage, String commitChoice, String lastCommit, String newBranchName, String versioning, List<Object> files) throws ApiException {
        com.squareup.okhttp.Call call = uploadContentValidateBeforeCall(owner, repo, branch, treePath, commitSummary, commitMessage, commitChoice, lastCommit, newBranchName, versioning, files, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload data to a repository (asynchronously)
     * last_commit - If the tip of the branch differs on the server at the moment of processing the request, the request is denied.
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param branch branch of the repository (required)
     * @param treePath path of a folter in the repository (required)
     * @param commitSummary  (optional)
     * @param commitMessage  (optional)
     * @param commitChoice  (optional)
     * @param lastCommit  (optional)
     * @param newBranchName  (optional)
     * @param versioning  (optional)
     * @param files  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadContentAsync(String owner, String repo, String branch, String treePath, String commitSummary, String commitMessage, String commitChoice, String lastCommit, String newBranchName, String versioning, List<Object> files, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadContentValidateBeforeCall(owner, repo, branch, treePath, commitSummary, commitMessage, commitChoice, lastCommit, newBranchName, versioning, files, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
