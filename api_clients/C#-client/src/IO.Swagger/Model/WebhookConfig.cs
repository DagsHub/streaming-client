/* 
 * DagsHub API
 *
 * This API is used to interact with DagsHub. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Key/value pairs to provide settings for this hook
    /// </summary>
    [DataContract]
        public partial class WebhookConfig :  IEquatable<WebhookConfig>, IValidatableObject
    {
        /// <summary>
        /// A string defining the media type used to serialize the payloads.
        /// </summary>
        /// <value>A string defining the media type used to serialize the payloads.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ContentTypeEnum
        {
            /// <summary>
            /// Enum Json for value: json
            /// </summary>
            [EnumMember(Value = "json")]
            Json = 1,
            /// <summary>
            /// Enum Form for value: form
            /// </summary>
            [EnumMember(Value = "form")]
            Form = 2        }
        /// <summary>
        /// A string defining the media type used to serialize the payloads.
        /// </summary>
        /// <value>A string defining the media type used to serialize the payloads.</value>
        [DataMember(Name="content_type", EmitDefaultValue=false)]
        public ContentTypeEnum ContentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookConfig" /> class.
        /// </summary>
        /// <param name="url">A string defining the URL to which the payloads will be delivered. (required).</param>
        /// <param name="contentType">A string defining the media type used to serialize the payloads. (required).</param>
        /// <param name="secret">An optional string that&#x27;s passed with the HTTP requests body..</param>
        public WebhookConfig(string url = default(string), ContentTypeEnum contentType = default(ContentTypeEnum), string secret = default(string))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for WebhookConfig and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new InvalidDataException("contentType is a required property for WebhookConfig and cannot be null");
            }
            else
            {
                this.ContentType = contentType;
            }
            this.Secret = secret;
        }
        
        /// <summary>
        /// A string defining the URL to which the payloads will be delivered.
        /// </summary>
        /// <value>A string defining the URL to which the payloads will be delivered.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }


        /// <summary>
        /// An optional string that&#x27;s passed with the HTTP requests body.
        /// </summary>
        /// <value>An optional string that&#x27;s passed with the HTTP requests body.</value>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookConfig {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookConfig);
        }

        /// <summary>
        /// Returns true if WebhookConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
