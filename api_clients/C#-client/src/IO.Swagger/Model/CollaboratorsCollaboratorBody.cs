/* 
 * DagsHub API
 *
 * This API is used to interact with DagsHub. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CollaboratorsCollaboratorBody
    /// </summary>
    [DataContract]
        public partial class CollaboratorsCollaboratorBody :  IEquatable<CollaboratorsCollaboratorBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollaboratorsCollaboratorBody" /> class.
        /// </summary>
        /// <param name="permission">The permission to grant the collaborator. Can be one of **read**, **write** and **admin**. (default to &quot;write&quot;).</param>
        public CollaboratorsCollaboratorBody(string permission = "write")
        {
            // use default value if no "permission" provided
            if (permission == null)
            {
                this.Permission = "write";
            }
            else
            {
                this.Permission = permission;
            }
        }
        
        /// <summary>
        /// The permission to grant the collaborator. Can be one of **read**, **write** and **admin**.
        /// </summary>
        /// <value>The permission to grant the collaborator. Can be one of **read**, **write** and **admin**.</value>
        [DataMember(Name="permission", EmitDefaultValue=false)]
        public string Permission { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollaboratorsCollaboratorBody {\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollaboratorsCollaboratorBody);
        }

        /// <summary>
        /// Returns true if CollaboratorsCollaboratorBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CollaboratorsCollaboratorBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollaboratorsCollaboratorBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Permission == input.Permission ||
                    (this.Permission != null &&
                    this.Permission.Equals(input.Permission))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Permission != null)
                    hashCode = hashCode * 59 + this.Permission.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
