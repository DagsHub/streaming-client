/* 
 * DagsHub API
 *
 * This API is used to interact with DagsHub. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PutFile
    /// </summary>
    [DataContract]
        public partial class PutFile :  IEquatable<PutFile>, IValidatableObject
    {
        /// <summary>
        /// Defines CommitChoice
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CommitChoiceEnum
        {
            /// <summary>
            /// Enum Direct for value: direct
            /// </summary>
            [EnumMember(Value = "direct")]
            Direct = 1,
            /// <summary>
            /// Enum CommitToNewBranch for value: commit-to-new-branch
            /// </summary>
            [EnumMember(Value = "commit-to-new-branch")]
            CommitToNewBranch = 2        }
        /// <summary>
        /// Gets or Sets CommitChoice
        /// </summary>
        [DataMember(Name="commit_choice", EmitDefaultValue=false)]
        public CommitChoiceEnum? CommitChoice { get; set; }
        /// <summary>
        /// Defines Versioning
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum VersioningEnum
        {
            /// <summary>
            /// Enum Dvc for value: dvc
            /// </summary>
            [EnumMember(Value = "dvc")]
            Dvc = 1,
            /// <summary>
            /// Enum Git for value: git
            /// </summary>
            [EnumMember(Value = "git")]
            Git = 2        }
        /// <summary>
        /// Gets or Sets Versioning
        /// </summary>
        [DataMember(Name="versioning", EmitDefaultValue=false)]
        public VersioningEnum? Versioning { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutFile" /> class.
        /// </summary>
        /// <param name="commitSummary">commitSummary.</param>
        /// <param name="commitMessage">commitMessage (required).</param>
        /// <param name="commitChoice">commitChoice.</param>
        /// <param name="lastCommit">if omitted only new files will be accepted.</param>
        /// <param name="newBranchName">newBranchName.</param>
        /// <param name="versioning">versioning.</param>
        /// <param name="files">files.</param>
        public PutFile(string commitSummary = default(string), string commitMessage = default(string), CommitChoiceEnum? commitChoice = default(CommitChoiceEnum?), string lastCommit = default(string), string newBranchName = default(string), VersioningEnum? versioning = default(VersioningEnum?), List<Object> files = default(List<Object>))
        {
            // to ensure "commitMessage" is required (not null)
            if (commitMessage == null)
            {
                throw new InvalidDataException("commitMessage is a required property for PutFile and cannot be null");
            }
            else
            {
                this.CommitMessage = commitMessage;
            }
            this.CommitSummary = commitSummary;
            this.CommitChoice = commitChoice;
            this.LastCommit = lastCommit;
            this.NewBranchName = newBranchName;
            this.Versioning = versioning;
            this.Files = files;
        }
        
        /// <summary>
        /// Gets or Sets CommitSummary
        /// </summary>
        [DataMember(Name="commit_summary", EmitDefaultValue=false)]
        public string CommitSummary { get; set; }

        /// <summary>
        /// Gets or Sets CommitMessage
        /// </summary>
        [DataMember(Name="commit_message", EmitDefaultValue=false)]
        public string CommitMessage { get; set; }


        /// <summary>
        /// if omitted only new files will be accepted
        /// </summary>
        /// <value>if omitted only new files will be accepted</value>
        [DataMember(Name="last_commit", EmitDefaultValue=false)]
        public string LastCommit { get; set; }

        /// <summary>
        /// Gets or Sets NewBranchName
        /// </summary>
        [DataMember(Name="new_branch_name", EmitDefaultValue=false)]
        public string NewBranchName { get; set; }


        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<Object> Files { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PutFile {\n");
            sb.Append("  CommitSummary: ").Append(CommitSummary).Append("\n");
            sb.Append("  CommitMessage: ").Append(CommitMessage).Append("\n");
            sb.Append("  CommitChoice: ").Append(CommitChoice).Append("\n");
            sb.Append("  LastCommit: ").Append(LastCommit).Append("\n");
            sb.Append("  NewBranchName: ").Append(NewBranchName).Append("\n");
            sb.Append("  Versioning: ").Append(Versioning).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PutFile);
        }

        /// <summary>
        /// Returns true if PutFile instances are equal
        /// </summary>
        /// <param name="input">Instance of PutFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PutFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CommitSummary == input.CommitSummary ||
                    (this.CommitSummary != null &&
                    this.CommitSummary.Equals(input.CommitSummary))
                ) && 
                (
                    this.CommitMessage == input.CommitMessage ||
                    (this.CommitMessage != null &&
                    this.CommitMessage.Equals(input.CommitMessage))
                ) && 
                (
                    this.CommitChoice == input.CommitChoice ||
                    (this.CommitChoice != null &&
                    this.CommitChoice.Equals(input.CommitChoice))
                ) && 
                (
                    this.LastCommit == input.LastCommit ||
                    (this.LastCommit != null &&
                    this.LastCommit.Equals(input.LastCommit))
                ) && 
                (
                    this.NewBranchName == input.NewBranchName ||
                    (this.NewBranchName != null &&
                    this.NewBranchName.Equals(input.NewBranchName))
                ) && 
                (
                    this.Versioning == input.Versioning ||
                    (this.Versioning != null &&
                    this.Versioning.Equals(input.Versioning))
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    input.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommitSummary != null)
                    hashCode = hashCode * 59 + this.CommitSummary.GetHashCode();
                if (this.CommitMessage != null)
                    hashCode = hashCode * 59 + this.CommitMessage.GetHashCode();
                if (this.CommitChoice != null)
                    hashCode = hashCode * 59 + this.CommitChoice.GetHashCode();
                if (this.LastCommit != null)
                    hashCode = hashCode * 59 + this.LastCommit.GetHashCode();
                if (this.NewBranchName != null)
                    hashCode = hashCode * 59 + this.NewBranchName.GetHashCode();
                if (this.Versioning != null)
                    hashCode = hashCode * 59 + this.Versioning.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
