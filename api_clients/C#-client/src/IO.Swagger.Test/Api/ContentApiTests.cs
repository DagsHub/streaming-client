/* 
 * DagsHub API
 *
 * This API is used to interact with DagsHub. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ContentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ContentApiTests
    {
        private ContentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ContentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ContentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ContentApi
            //Assert.IsInstanceOfType(typeof(ContentApi), instance, "instance is a ContentApi");
        }

        /// <summary>
        /// Test GetArchive
        /// </summary>
        [Test]
        public void GetArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo = null;
            //string _ref = null;
            //string format = null;
            //instance.GetArchive(username, repo, _ref, format);
            
        }
        /// <summary>
        /// Test GetContent
        /// </summary>
        [Test]
        public void GetContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string branch = null;
            //string treePath = null;
            //bool? includeSize = null;
            //var response = instance.GetContent(owner, repo, branch, treePath, includeSize);
            //Assert.IsInstanceOf<Files> (response, "response is Files");
        }
        /// <summary>
        /// Test GetRaw
        /// </summary>
        [Test]
        public void GetRawTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo = null;
            //string _ref = null;
            //string path = null;
            //instance.GetRaw(username, repo, _ref, path);
            
        }
        /// <summary>
        /// Test UploadContent
        /// </summary>
        [Test]
        public void UploadContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string branch = null;
            //string treePath = null;
            //string commitSummary = null;
            //string commitMessage = null;
            //string commitChoice = null;
            //string lastCommit = null;
            //string newBranchName = null;
            //string versioning = null;
            //List<Object> files = null;
            //var response = instance.UploadContent(owner, repo, branch, treePath, commitSummary, commitMessage, commitChoice, lastCommit, newBranchName, versioning, files);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
